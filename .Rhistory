## Vector of all race names
race_name <- c("White", "Black", "*American/ \n *Alaskan", "*Hawaii/ \n Pacific \n Islander", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name)
race_count
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "Native \n American", "*Hawaii/ \n Pacific \n Islander", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "Native \n American", "Native Hawaiian", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "Native \n American", "Native \n Hawaiian", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "Native \n American", "Hawaiian \n Native", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "N. \n American", "Hawaiian \n N.", "Asian", "Mixed \n Race", "Hispanic")
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "N. \n American", "Hawaii \n N.", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "N. \n American", "N. \n Hawaii", "Asian", "Mixed \n Race", "Hispanic")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000))
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000),
xlab = "Race",
ylab = "# of Respondents",
main = "Race Frequency of Respondents in 2016-2017")
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000),
xlab = "Race",
ylab = "# of Respondents",
main = "Race Frequency of Respondents in 2016-2017")
# Bar plot to show race demographic
## Vector of all race names
race_name <- c("White", "Black", "N. \n American", "N. \n Hawaii", "Asian", "Mixed \n Race", "Hispanic")
## Table giving counts of each race category
race_count <- table(mj$NEWRACE2)
## Bar plot
barplot(race_count, names.arg = race_name, ylim = c(0, 70000),
xlab = "Race",
ylab = "# of Respondents",
main = "Race Frequency of Respondents in 2016-2017")
# Load data frame into r markdown
draft <- read.csv("../data/draft.csv")
head(draft)
# library of packages
library(dplyr)
# Vector w/ all the names of ideology
## 1 = very conservative; 5 = very liberal
ideo_name <- c("Very \n Conservative", "Conservative", "Moderate", "Liberal", "Very \n Liberal")
# Create table w/ counts of each ideology
ideology_table <- table(draft$ideology)
# Bar plot w/ axis and title
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
# Create a new column w/ binary variable on whether or not they are (very) liberal
draft$liberal <- as.integer(draft$ideology < 4)
# Group by year and find the proportion of liberal people in that year
draft %>%
group_by(year) %>%
summarise(mean(liberal, na.rm = TRUE))
# Find ATE of liberalism based on whether or not they were drafted
# treatment = they got drafted, control = no draft
## mean(df$column1[df$column2 == result])
## what is the mean of column1 if column2 == result ?
## what is the mean of $liberal if they didn't get/got drafted?
drafted_liberal <- mean(draft$liberal[draft$draft == 1], na.rm = TRUE) #0.683
notdrafted_liberal <- mean(draft$liberal[draft$draft == 0], na.rm = TRUE) #0.671
# mean.treated - mean.control = ATE
ate_liberal <- drafted_liberal - notdrafted_liberal #0.0122
# Subset two data frames based on states
## subset(df, column == result)
colorado <- subset(draft, state == "CO")
oregon <- subset(draft, state == "OR")
# find the ATE based on state
## mean(df$column1[df$column2 == result])
co_drafted_liberal <- mean(colorado$liberal[colorado$draft == 1], na.rm = TRUE) #0.733
co_notdrafted_liberal <- mean(colorado$liberal[colorado$draft == 0], na.rm = TRUE) #0.717
or_drafted_liberal <- mean(oregon$liberal[oregon$draft == 1], na.rm = TRUE)
#0.644
or_notdrafted_liberal <- mean(oregon$liberal[oregon$draft == 0], na.rm = TRUE)
# Load data frame into r markdown
draft <- read.csv("../data/draft.csv")
head(draft)
# library of packages
library(dplyr)
# Vector w/ all the names of ideology
## 1 = very conservative; 5 = very liberal
ideo_name <- c("Very \n Conservative", "Conservative", "Moderate", "Liberal", "Very \n Liberal")
# Create table w/ counts of each ideology
ideology_table <- table(draft$ideology)
# Bar plot w/ axis and title
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
# Create a new column w/ binary variable on whether or not they are (very) liberal
draft$liberal <- as.integer(draft$ideology < 4)
# Group by year and find the proportion of liberal people in that year
draft %>%
group_by(year) %>%
summarise(mean(liberal, na.rm = TRUE))
# Find ATE of liberalism based on whether or not they were drafted
# treatment = they got drafted, control = no draft
## mean(df$column1[df$column2 == result])
## what is the mean of column1 if column2 == result ?
## what is the mean of $liberal if they didn't get/got drafted?
drafted_liberal <- mean(draft$liberal[draft$draft == 1], na.rm = TRUE) #0.683
notdrafted_liberal <- mean(draft$liberal[draft$draft == 0], na.rm = TRUE) #0.671
# mean.treated - mean.control = ATE
ate_liberal <- drafted_liberal - notdrafted_liberal #0.0122
# Subset two data frames based on states
## subset(df, column == result)
colorado <- subset(draft, state == "CO")
oregon <- subset(draft, state == "OR")
# find the ATE based on state
## mean(df$column1[df$column2 == result])
co_drafted_liberal <- mean(colorado$liberal[colorado$draft == 1], na.rm = TRUE) #0.733
co_notdrafted_liberal <- mean(colorado$liberal[colorado$draft == 0], na.rm = TRUE) #0.717
or_drafted_liberal <- mean(oregon$liberal[oregon$draft == 1], na.rm = TRUE)
#0.644
or_notdrafted_liberal <- mean(oregon$liberal[oregon$draft == 0], na.rm = TRUE)
#0.6402
# Vector w/ all the names of ideology
## 1 = very conservative; 5 = very liberal
ideo_name <- c("Very \nConservative", "Conservative", "Moderate", "Liberal", "Very \nLiberal")
# Create table w/ counts of each ideology
ideology_table <- table(draft$ideology)
# Bar plot w/ axis and title
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
legend(x = 5, y = 250, legend = c("V. = Very", "Con. = Conservative", "Lib. = Liberal"))
legend(x = 4, y = 250, legend = c("V. = Very", "Con. = Conservative", "Lib. = Liberal"))
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
legend(x = 4, y = 250, legend = c("V. = Very", "Con. = Conservative", "Lib. = Liberal"))
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
legend(x = 4, y = 250, legend = c("Con. = Conservative", "Lib. = Liberal"))
# Vector w/ all the names of ideology
## 1 = very conservative; 5 = very liberal
ideo_name <- c("V. \nCon.", "Con.", "Moderate", "Lib.", "Very \nLib.")
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
legend(x = 4, y = 250, legend = c("Con. = Conservative", "Lib. = Liberal"))
# Vector w/ all the names of ideology
## 1 = very conservative; 5 = very liberal
ideo_name <- c("Very \nCon.", "Con.", "Moderate", "Lib.", "Very \nLib.")
# Create table w/ counts of each ideology
ideology_table <- table(draft$ideology)
# Bar plot w/ axis and title
barplot(ideology_table, names.arg = ideo_name, ylim = c(0, 250),
xlab = "Ideology",
ylab = "Num. of Respondents",
main = "Ideology of Draft-Elegible Men During the Vietnam War")
legend(x = 4, y = 250, legend = c("Con. = Conservative", "Lib. = Liberal"))
## ATE = treatment - control
ate_colorado <- co_drafted_liberal - co_notdrafted_liberal
ate_colorado
ate_oregon <- or_drafted_liberal - or_notdrafted_liberal
ate_oregon
ate_state <- ate_colorado - ate_oregon
ate_state
lm(liberal ~ draft, data = oregon)
# Checking work
lm(liberal ~ draft, data = colorado)
lm(liberal ~ draft, data = oregon)
or_notdrafted_liberal
ate_oregon
# Subset two data frames based on states
## subset(df, column == result)
colorado <- subset(draft, state == "CO")
oregon <- subset(draft, state == "OR")
# find the ATE based on state
## mean(df$column1[df$column2 == result])
co_drafted_liberal <- mean(colorado$liberal[colorado$draft == 1], na.rm = TRUE)
#0.733
co_notdrafted_liberal <- mean(colorado$liberal[colorado$draft == 0], na.rm = TRUE)
#0.717
or_drafted_liberal <- mean(oregon$liberal[oregon$draft == 1], na.rm = TRUE)
#0.644
or_notdrafted_liberal <- mean(oregon$liberal[oregon$draft == 0], na.rm = TRUE)
#0.6402
## ATE = treatment - control
ate_colorado <- co_drafted_liberal - co_notdrafted_liberal #0.0168
ate_oregon <- or_drafted_liberal - or_notdrafted_liberal   #0.0041
ate_state <- ate_colorado - ate_oregon #0.0127
# Checking work
lm(liberal ~ draft, data = colorado)
lm(liberal ~ draft, data = oregon)
# Subset two data frames based on states
## subset(df, column == result)
colorado <- subset(draft, state == "CO")
oregon <- subset(draft, state == "OR")
# find the ATE based on state
## mean(df$column1[df$column2 == result])
co_drafted_liberal <- mean(colorado$liberal[colorado$draft == 1], na.rm = TRUE)
#0.733
co_notdrafted_liberal <- mean(colorado$liberal[colorado$draft == 0], na.rm = TRUE)
#0.717
or_drafted_liberal <- mean(oregon$liberal[oregon$draft == 1], na.rm = TRUE)
#0.644
or_notdrafted_liberal <- mean(oregon$liberal[oregon$draft == 0], na.rm = TRUE)
#0.6402
## ATE = treatment - control
ate_colorado <- co_drafted_liberal - co_notdrafted_liberal #0.0168
ate_oregon <- or_drafted_liberal - or_notdrafted_liberal   #0.0041
ate_state <- ate_colorado - ate_oregon #0.0127
# Checking work
lm(liberal ~ draft, data = colorado)
lm(liberal ~ draft, data = oregon)
knitr::opts_chunk$set(echo = TRUE)
# Download all data and make a big data frame
mj <- read.csv("../data/dataset_2014.csv")
## for loop to download all the data
for (x in 15:20) {
path <- paste0("../data/dataset_20", x, ".csv")
data <- read.csv(path)
print(nrow(data))
mj <- rbind(mj, data)
}
# head(mj)
# tail(mj)
nrow(mj)
# Download all data and make a big data frame
mj <- read.csv("../data/dataset_2014.csv")
## for loop to download all the data
for (x in 15:20) {
path <- paste0("../data/dataset_20", x, ".csv")
data <- read.csv(path)
num_rows <- 0
num_rows <- num_rows + nrow(data)
mj <- rbind(mj, data)
}
nrow(mj)
# head(mj)
# tail(mj)
# Download all data and make a big data frame
mj <- read.csv("../data/dataset_2014.csv")
print(nrow(mj))
## for loop to download all the data
for (x in 15:20) {
path <- paste0("../data/dataset_20", x, ".csv")
data <- read.csv(path)
mj <- rbind(mj, data)
}
nrow(mj)
# head(mj)
# tail(mj)
# Load data set into environment
world_bank <- read.csv("../data/world_bank.csv")
polity <- read.csv("../data/polity.csv")
# Find the mean of missing data in world_bank df
colMeans(is.na(world_bank)) * 100
# Subset the polity data set to only 1970 and 2015
polity <- polity[(polity$year >= 1970) &
(polity$year <= 2015), ] # empty space after comma
# Keep only the columns we need in polity
library(dplyr)
polity <- polity %>%
select(scode, year, polity) %>%
# rename column to "country_code"
rename("country_code" = "scode")
# Merge world_bank and polity
dataframe <- merge(world_bank, polity, by = c("country_code", "year"))
nrow(dataframe)
length(unique(dataframe$country_code))
dataframe <- dataframe %>%
mutate(missing = ifelse(apply(dataframe, 1, anyNA), 1, 0))
head(dataframe)
# calculate the prop. of rows with missing data by year
## so for 1971, how many missing data did it have
na_hist <- dataframe %>%
group_by(year) %>%
summarize(mean(missing)) %>%
rename("mean_missing" = 'mean(missing)')
barplot(na_hist$mean_missing, names.arg = na_hist$year, ylim = c(0, 0.4),
xlab = "Year",
ylab = "Proportion of Missing Data",
main = "Proportion of Missing Data Over the Years")
boxplot(polity ~ missing, data = dataframe, names = c("NOT missing data", "missing data"),
xlab = "Whether or not Country-Year Observation is Missing Data",
ylab = "Polity Score",
main = "Polity Score Comparison of Missing Data")
# Use log() on pop. density, inf_mort, GDP per capita
dataframe <- dataframe %>%
mutate(pop_density = log(pop_density)) %>%
mutate(inf_mort = log(inf_mort)) %>%
mutate(gdp_per_capita = log(gdp_per_capita))
regression <- lm(inf_mort ~ polity + gdp_growth + gdp_per_capita + pop_density, data = dataframe)
summary(regression)
# Create dummy variables for year and country
levels(dataframe$country_code)
levels(dataframe$year)
regression2 <- lm(inf_mort ~ polity + gdp_growth + gdp_per_capita + pop_density + country_code + year, data = dataframe)
summary(regression2)
# Create dummy variables for year and country
levels(dataframe$country_code)
levels(dataframe$year)
regression2 <- lm(inf_mort ~ polity + gdp_growth + gdp_per_capita + pop_density + country_code * year, data = dataframe)
summary(regression2)
# Create dummy variables for year and country
levels(dataframe$country_code)
levels(dataframe$year)
regression2 <- lm(inf_mort ~ polity + gdp_growth + gdp_per_capita + pop_density + country_code + year, data = dataframe)
summary(regression2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Download all data and make a big data frame
mj <- read.csv("../data/dataset_2014.csv")
## for loop to download all the data
for (x in 15:20) {
path <- paste0("../data/dataset_20", x, ".csv")
data <- read.csv(path)
mj <- rbind(mj, data)
}
mj <- mj %>%
select(X, QUESTID2, year, CATAG6, mjyrtot) %>%
filter(mjyrtot <= 365)
# Remove all unnecessary data
rm(data)
rm(path)
rm(x)
head(mj)
# number of people in survey
length(mj$QUESTID2)
# Bar plot of ages of respondents
## create a vector of all the age ranges
age_range <- c("12-17", "18-25", "26-34", "35-49", "50-64", "65+")
## table giving counts of each category of age
age_count <- table(mj$CATAG6) / 1000
## bar plot
par(mar = c(5.1, 5.5, 4.1, 2.1)) # c(bottom, left, top, right)
barplot(age_count, names.arg = age_range, ylim = c(0, 30),
ylab = "# of Respondents\n (in Thousands)",
xlab = "Age Group in Years",
main = "Age Frequency of Respondents (2014-2020)")
# Overall ATE (not based on age yet) -------------------------------------------
## average based on 2014:16 and 2017:2020
mean(mj$mjyrtot[mj$year == 2014:2016], na.rm = TRUE)
mean(mj$mjyrtot[mj$year == 2017:2020], na.rm = TRUE)
mean(mj$mjyrtot[mj$year == 2017:2020], na.rm = TRUE) - mean(mj$mjyrtot[mj$year == 2014:2016], na.rm = TRUE)
# Age Stats --------------------------------------------------------------------
## make a new data frame that shows breakdown of ages
diff_age <- mj %>%
group_by(CATAG6) %>%
summarise(mean(mjyrtot, na.rm = TRUE)) %>%
rename("average_mjyrtot" = "mean(mjyrtot, na.rm = TRUE)",
"age_range" = "CATAG6")
diff_age <- as.data.frame(diff_age)
## exchanging CATAG6 ages with labels
for (x in 1:6) {
diff_age[x, 1] <- age_range[x]
}
diff_age
par(mar = c(5.1, 5.5, 4.1, 2.1))
barplot(diff_age$average_mjyrtot, names.arg = diff_age$age_range, ylim = c(0, 150),
ylab = "Average Total Days Used",
xlab = "Age Groups",
main = "Average Total Days of People Who\n Have Used Marijuana based on Age Groups")
mj2 <- mj
# dummy variables
mj2 <- mj %>%
mutate("twelve" = ifelse((CATAG6 == 1), 1, 0),
"eighteen" = ifelse((CATAG6 == 2), 1, 0),
"twentysix" = ifelse((CATAG6 == 3), 1, 0),
"thirtyfive" = ifelse((CATAG6 == 4), 1, 0),
"fifty" = ifelse((CATAG6 == 5), 1, 0),
"sixtyfive" = ifelse((CATAG6 == 1), 1, 0))
lm(mjyrtot ~ twelve + eighteen + twentysix + thirtyfive + fifty + sixtyfive , data = mj2)
# Overall ATE (mjyrtot + age) ----------------------------------------------------
## variables for pre and post treatment years
pre_years <- 2014:2016
post_years <- 2017:2020
years <- c(pre_years, post_years)
## for loop; creates new vectors
pre_list <- c()
post_list <- c()
for (x in 1:6) {
pre_age_year <- mean(mj$mjyrtot[mj$year == pre_years & mj$CATAG6 == x], na.rm = TRUE)
pre_list <- c(pre_list, pre_age_year)
post_age_year <- mean(mj$mjyrtot[mj$year == post_years & mj$CATAG6 == x], na.rm = TRUE)
post_list <- c(post_list, post_age_year)
}
## new data frame
age_range <- list(age_range)
pre_list <- list(pre_list)
post_list <- list(post_list)
age_year <- data.frame(unlist(age_range),
unlist(pre_list),
unlist(post_list))
age_range <- unlist(age_range)
pre_list <- unlist(pre_list)
post_list <- unlist(post_list)
## make data frame look near
age_year <- age_year %>%
rename("age_range" = "unlist.age_range.",
"pre_age_year" = "unlist.pre_list.",
"post_age_year" = "unlist.post_list.") %>%
mutate(diff = post_age_year - pre_age_year)
age_year
# GGPlot doesn't work with the type of data above though, so we have to change it so that it works
test <- age_year %>%
select(age_range, pre_age_year) %>%
rename("age_year" = "pre_age_year") %>%
mutate(treatment = "Pre Treatment")
test2 <- age_year %>%
select(age_range, post_age_year) %>%
rename("age_year" = "post_age_year") %>%
mutate(treatment = "Post Treatment")
test3 <- rbind(test, test2)
rm(test)
rm(test2)
# ggplot
library(ggplot2)
line_graph <- ggplot(data = test3, aes(x = age_range, y = age_year, group = treatment)) +
geom_line(aes(color = treatment)) +
geom_point(aes(color = treatment))
line_graph <- line_graph + scale_color_manual(values = c("#6A0136", "#ff3562"))
line_graph + labs(title = "Average Proportion of Marijuana Usage\n Before and After Legalization",
x = "Age Groups",
y = "Proportion of Marijuana Usage")
# Overall ATE (not based on age yet) -------------------------------------------
## average based on 2014:16 and 2017:2020
mean(mj$mjyrtot[mj$year == 2014:2016], na.rm = TRUE)
mean(mj$mjyrtot[mj$year == 2017:2020], na.rm = TRUE)
mean(mj$mjyrtot[mj$year == 2017:2020], na.rm = TRUE) -
mean(mj$mjyrtot[mj$year == 2014:2016], na.rm = TRUE)
View(mj)
regress <- lm(mjyrtot ~ CATAG6 + year, data = mj)
summary(regress)
regress
# dummy variables for CATAG6 and year
levels(mj$CATAG6)
levels(mj$year)
regress <- lm(mjyrtot ~ CATAG6 + year, data = mj)
regress
regress <- lm(mjyrtot ~ CATAG6 * year, data = mj)
summary(regress)
regress
regress <- lm(mjyrtot ~ CATAG6 + year, data = mj)
summary(regress)
regress <- lm(mjyrtot ~ CATAG6 + year, data = mj)
summary(regress)
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
R.version.string
install.packages(c("AMR", "brew", "brio", "bslib", "checkmate", "cli", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "dplyr", "e1071", "evaluate", "fansi", "geofacet", "gert", "ggmap", "ggplot2", "ggrepel", "ggridges", "ggthemes", "gt", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "igraph", "ISOcodes", "jsonlite", "knitr", "later", "leaflet", "leaflet.providers", "lifecycle", "lintr", "lme4", "magick", "maps", "markdown", "Matrix", "MatrixModels", "matrixStats", "pkgbuild", "plotly", "plyr", "processx", "progress", "R.utils", "ragg", "raster", "RcppArmadillo", "RcppEigen", "RCurl", "reactR", "RgoogleMaps", "RJSONIO", "rlang", "rnaturalearth", "rprojroot", "rsconnect", "s2", "sass", "scales", "sf", "shiny", "sp", "stm", "stringi", "stringr", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "units", "usmap", "usmapdata", "utf8", "V8", "vctrs", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "yaml"))
R.version.string
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(dplyr)
setwd("C:/Users/kmngu/Desktop/AirBNB")
unique_listing <- read.csv("dataset/unique_listings_month.csv")
View(unique_listing)
unique_listing <- read.csv("dataset/unique_listings_month.csv") %<%
filter(state.name == "WA")
unique_listing <- read.csv("dataset/unique_listings_month.csv") %>%
filter(state.name == "WA")
unique_listing <- read.csv("dataset/unique_listings_month.csv") %>%
filter(statename == "WA")
unique_listing <- read.csv("dataset/unique_listings_month.csv") %>%
filter(StateName == "WA")
